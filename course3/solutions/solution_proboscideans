import plotly.graph_objects as go
import numpy as np

# Create figure
fig = go.Figure()

## add shoreline view
fig.add_trace( go.Scatter( x=coastlines.lon, y=coastlines.lat,  mode='lines',
                           showlegend = False, # no legend 
                           hoverinfo = 'none'  # no hoverinfo for coastlines
                         )
             )



def make_label(row):
    return f"{row.accepted_name} ({row.identified_rank})<br>" + f"{row.max_ma:.1f}MYA - {row.min_ma:.1f}MYA"
    

## add fossils
fig.add_trace( go.Scatter( x=df['lng'],
                           y=df['lat'], 
                           opacity=0.75 , 
                           mode='markers',
                           hovertemplate = "%{text}<br>"+ # custom label
                                         "coords : (%{y:.1f}N, %{x:.1f}E)" ,
                         text = [make_label(row) for i,row in  df.iterrows()]
                           
                         )
             )

fig
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import numpy as np


# Create figure with subplots
fig = make_subplots(rows=1, cols=2)


### subplot 1

# coastlines
fig.add_trace( go.Scatter( visible=True, 
                          x=coastlines.lon, y=coastlines.lat,
                          mode='lines',
                          showlegend=False,
                          hoverinfo="none" 
                         ) ,
              row=1, col=1  # this is how we say in which subplot this traces goes
             )
def make_label(row):
    return f"{row.accepted_name} ({row.identified_rank})<br>" + f"{row.max_ma:.1f}MYA - {row.min_ma:.1f}MYA"
    

# add fossils
fig.add_trace( go.Scatter( x=df['lng'],
                           y=df['lat'], 
                           opacity=0.75 , 
                           mode='markers',
                           hovertemplate = "%{text}<br>"+ # custom label
                                         "coords : (%{y:.1f}N, %{x:.1f}E)" ,
                         text = [make_label(row) for i,row in  df.iterrows()]
                           
                         ),
              row=1, col=1
             )


### subplot 2
R = np.arange(-60, 0.1, 1) ## define a timeline, from -60MYA to now
nG = [df.loc[ (df.max_ma > -T) & (df.min_ma < -T) , 'genus' ].nunique() for T in R] ## count number of genus at each time

fig.add_trace( go.Scatter( x=R, 
                           y=nG, 
                           mode='lines',showlegend=False),
                           row=1, col=2) 

fig

## V2 : map and line of the number of genus
from plotly.subplots import make_subplots
import plotly.graph_objects as go


# Create figure with subplots
fig = make_subplots(rows=1, cols=2)

sliderSteps = np.arange(-60, 0.1, 1)


## add static shoreline view

    
fig.add_trace( go.Scatter( visible=True, 
                          x=coastlines.lon, y=coastlines.lat,
                          mode='lines',
                          showlegend=False,
                          hoverinfo="none" 
                         ) ,
              row=1, col=1  # this is how we say in which subplot this traces goes
             )

### adding static number of genus line:
R = sliderSteps
nG = [df.loc[ (df.max_ma > -T) & (df.min_ma < -T) , 'genus' ].nunique() for T in R]

fig.add_trace( go.Scatter( visible=True, 
                          x=R, 
                          y=nG, 
                          mode='lines',showlegend=False),
                          row=1, col=2) 



SliderVisible_offset =  len(fig.data)
SliderVisible_idx = []

# Add traces, one for each slider step
for step in sliderSteps:

    before = len(fig.data)
    
    
    mask = (df.max_ma > -(step)) & (df.min_ma < -(step))
    temp_df = df.loc[mask, :]

    ## add fossils trace
    fig.add_trace(
        go.Scatter(
            visible=False,
            x=temp_df['lng'], y=temp_df['lat'], 
            opacity=0.75 , mode='markers',
            hovertemplate='%{text}',
            text = temp_df.genus,
            showlegend=False
        ),
        row=1, col=1  
    )
    ## add line on the second plot
    fig.add_trace(
        go.Scatter(
            visible=False,
            x=[step,step], y=[-100,100] , mode='lines',line= { 'color': 'black'},showlegend=False
        ),
        row=1, col=2
    )
    
    ## setup which trace would be visible at this point in the slider 
    after = len(fig.data)
    SliderVisible_idx.append(list(range( before , after )))



# Create and add slider
steps = []
for i ,T in enumerate( sliderSteps ):
    ng = df.loc[ (df.max_ma > -T) & (df.min_ma < -T) , 'genus' ].nunique()
    nf = ( (df.max_ma > -T) & (df.min_ma < -T) ).sum()
    title = "Mya: {}\nnumber of Proboscidean fossils: {}\nnumber of Proboscidean genus: {}".format(T,nf,ng)
    
    step = dict(
        method="update",
        args=[{"visible": [True]*SliderVisible_offset + [False] * (len(fig.data)-SliderVisible_offset )},
              {"title":title }],  # layout attribute
        label = str(T)
    )
    for x in SliderVisible_idx[i]:
        step["args"][0]["visible"][x] = True  # Toggle i'th trace to "visible"
    steps.append(step)

    
# Make 38th slider position visible
for i in SliderVisible_idx[38]:
    fig.data[i].visible = True

sliders = [dict(
    active=38,
    currentvalue={"prefix": "Mya: "},
    pad={"t": 50},
    steps=steps
)]
fig.update_layout(title_text=steps[38]["args"][1]['title'])


fig.update_layout(
    sliders=sliders
)

#fig.show()
fig.update_xaxes(title_text="longitude", range=[-180, 180], row=1, col=1)
fig.update_yaxes(title_text="latitude", range=[-90, 90], row=1, col=1)

fig.update_xaxes(title_text="Mya", row=1, col=2)
fig.update_yaxes(title_text="number of Proboscidean genus", range=[-2, 40], row=1, col=2)



fig.write_html('interactive_proboscidean_fossils_map_test.html')
fig

